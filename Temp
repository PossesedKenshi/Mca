HOW TO RUN A PROGRAM ON KEIL

PROJECT > NEW ΜVISION PROJECT
SELECT DEVICE - AT89C51
SAVE CODE AS .ASM FILE
TARGET 1 > OPTIONS > OUTPUT > TICK HEX FILE OPTION
RIGHT CLICK SOURCE GROUP 1 > ADD EXISTING FILE TO SOURCE GROUP > F7 TO BUILD
START DEBUG PROCESS
INPUT DATA IN MEMORY WINDOW
F5 TO EXECUTE

1. WAP TO FIND LARGEST NUMBER FROM A DATA BLOCK OF 10 BYTES. (VERIFIED)

ORG 0000H
MOV DPTR,#2500H
MOV R2,#0AH
MOV R1,#00H
UP: MOVX A,@DPTR
CJNE A, 01,NEXT
NEXT: JC DOWN
MOV R1,A
DOWN: INC DPTR
DJNZ R2,UP
MOV DPTR,#250AH
MOV A,R1
MOVX @DPTR,A
HERE: SJMP HERE
END

OUTPUT: X:2500H

2. WAP TO FIND SMALLEST NUMBER FROM A DATA BLOCK OF 10 BYTES. (VERIFIED)

ORG 0000H
MOV DPTR,#2500H
MOV R2,#0AH
MOV R1,#0FFH
UP: MOVX A,@DPTR
CJNE A, 01,NEXT
NEXT: JNC DOWN
MOV R1,A
DOWN: INC DPTR
DJNZ R2,UP
MOV DPTR,#250AH
MOV A,R1
MOVX @DPTR,A
HERE: SJMP HERE
END

OUTPUT: X:2500H




3. WAP TO ARRANGE SERIES OF TEN 8-BIT NUMBERS IN ASCENDING ORDER. (VERIFIED)

ORG 00H
MOV R3,#0AH
AGAIN: MOV R4,#0AH
MOV R0,#20H
CLR C
UP: MOV A,@R0
MOV R1,A
INC R0
MOV A,@R0
SUBB A,R1
JNC SKIP
MOV A,@R0
DEC R0
MOV @R0,A
MOV A,R1
INC R0
MOV @R0,A
SKIP: DJNZ R4,UP
DJNZ R3,AGAIN
STOP: SJMP STOP
END

INPUT: D:20H
OUTPUT: D:20H

4. WAP TO ARRANGE SERIES OF TEN 8-BIT NUMBERS IN DESCENDING ORDER. (VERIFIED)

ORG 00H
MOV R3,#0AH
AGAIN: MOV R4,#0AH
MOV R0,#20H
CLR C
UP: MOV A,@R0
MOV R1,A
INC R0
MOV A,@R0
SUBB A,R1
JC SKIP
MOV A,@R0
DEC R0
MOV @R0,A
MOV A,R1
INC R0
MOV @R0,A
SKIP: DJNZ R4,UP
DJNZ R3,AGAIN
STOP: SJMP STOP
END

INPUT: D:20H
OUTPUT: D:20H




5. WAP TO CONVERT TWO DIGIT BCD NUMBER INTO HEX NUMBER. (VERIFIED)

MOV R0,#30H
MOV R1,#00H
MOV A,@R0
ANL A,#0FH
MOV R1,A
MOV A,@R0
ANL A,#0F0H
SWAP A
MOV B,A
MOV A,#0AH
MUL AB
ADD A,R1
INC R0
MOV @R0,A
HERE: SJMP HERE
END
    
INPUT- D:30H EG.99
OUTPUT- D:31H EG.63

6. WAP TO COUNT NUMBER OF 1’S IN A GIVEN BYTE. (VERIFIED)

MOV R0,#20H
MOV R3,#08H
MOV R2,#00H
CLR C
MOV A,@R0
UP: RRC A
JNC DOWN 
INC R2
DOWN:DJNZ R3,UP
MOV A,R2
END

INPUT : D:20H
OUTPUT : SYS REGISTER A
EXAMPLE : FF -> 8

7. WAP TO COUNT NUMBER OF 0’S IN A GIVEN BYTE. (VERIFIED)

MOV R0,#20H
MOV R3,#08H
MOV R2,#00H
CLR C
MOV A,@R0
UP: RRC A
JC DOWN 
INC R2
DOWN:DJNZ R3,UP
MOV A,R2
MOV 40H,A
END

INPUT : D:20H
OUTPUT : SYS REGISTER A
EXAMPLE : 0F -> 4

8. WAP TO COUNT EVEN NUMBER FROM A SERIES OF TEN 8-BIT NUMBERS. (VERIFIED)

MOV R0,#20H
MOV R3,#0AH
MOV R2,#00H
CLR C
UP: MOV A,@R0
RRC A
JC DOWN
INC R2
DOWN: INC R0
DJNZ R3,UP
MOV A,R2
MOV 40H,A
END

INPUT : D:20H
OUTPUT : D:40H

9. WAP TO COUNT ODD NUMBER FROM A SERIES OF TEN 8-BIT NUMBERS. (VERIFIED)

MOV R0,#20H
MOV R3,#0AH
MOV R2,#00H
CLR C
UP: MOV A,@R0
RRC A
JNC DOWN
INC R2
DOWN: INC R0
DJNZ R3,UP
MOV A,R2
MOV 40H,A
END

INPUT : D:20H
OUTPUT : D:40H


10. WAP TO EXCHANGE DATA BLOCKS OF 10 BYTES. (VERIFIED)

MOV R0,#30H
MOV R1,#40H
MOV R2 ,#0AH
UP: MOV A,@R0
XCH A,@R1
MOV @R0,A.
INC R0
INC R1
DJNZ R2,UP
HERE: SJMP HERE
END





11. WAP TO EXCHANGE DATA BLOCK OF 10 BYTES WITHOUT EXCHANGE INSTRUCTION. (VERIFIED)

MOV R0,#20H
MOV R1,#30H
MOV R3,#0AH
//R2=TEMP
UP: MOV A,@R0
MOV R2,A
MOV A,@R1
MOV @R0,A
MOV A,R2
MOV @R1,A
INC R0
INC R1
DJNZ R3,UP
HERE: SJMP HERE
END
    
12. WAP TO TRANSFER DATA BLOCKS OF 10 BYTES FROM INTERNAL MEMORY TO EXTERNAL MEMORY. (TECHMAX L-9) (VERIFIED)

MOV DPTR,#2500H
MOV R0,#30H
MOV R3,#0AH
UP: MOV A,@R0
MOVX @DPTR,A
INC DPTR
INC R0
DJNZ R3,UP
HERE: SJMP HERE
END
    
    //INTERNAL INPUT- D:30H
    //EXTERNAL OUTPUT- X:2500H

13. WAP TO TRANSFER DATA BLOCKS OF 10 BYTES FROM INTERNAL MEMORY TO INTERNAL MEMORY. (FILE EXP 1) (VERIFIED)

MOV R0,#20H
MOV R1,#30H
MOV R3,#0AH
UP: MOV A,@R0
MOV @R1,A
INC R0
INC R1
DJNZ R3,UP
HERE: SJMP HERE
END

MEMORY BLOCK 1 -> D:20H
MEMORY BLOCK 2 -> D:30H

14. WAP TO TRANSFER DATA BLOCKS OF 10 BYTES FROM EXTERNAL MEMORY TO EXTERNAL MEMORY. (FILE EXP 1) (VERIFIED)

MOV R0,#24H
MOV R1,#25H
MOV DPL,#00H
MOV R3,#0AH
UP: MOV DPH,R0
MOVX A,@DPTR
MOV DPH,R1
MOVX @DPTR,A
INC DPL
DJNZ R3,UP
HERE: SJMP HERE
END

MEMORY BLOCK 1 -> X:2400H
MEMORY BLOCK 2 -> X:2500H

15. WAP TO FIND 2’S COMPLEMENT OF 16-BIT NUMBER. (VERIFIED)

MOV R0,#30H
MOV R1,#31H
MOV A,@R0
CPL A
ADD A,#01H
MOV @R0,A
MOV A,@R1
CPL A 
ADDC A,#00H
MOV @R1,A
END
 
INPUT : D:30H
OUTPUT : D:30H
EXAMPLE : ENTER D:30H = FF AND D:31H = FF
                  D:30H = 01 AND D:31H = 00

16. WAP TO MULTIPLY 16-BIT NO. INTO 8-BIT NUMBER. (VERIFIED)

MOV R0,#20H  // LB OF 16B IN 20
MOV A,@R0
MOV R0,#22H  //8B IN 22
MOV B,@R0
MUL AB 
MOV 23H,A  //LB1 IN 23 

MOV R1,B  //HB1 IN R1
MOV B,@R0  //HB OF 16B IN 21
MOV R0,#21H
MOV A,@R0
MUL AB
ADD A,R1  //HB1+LB2
MOV R1,#24H //HB1+LB2 IN 24
MOV @R1,A
MOV A,B
ADDC A,#00H
MOV R0,#25H
MOV @R0,A  //HB2+CARRY IN 25
HERE: SJMP HERE
END

//INPUT D:20H  LB OF 16B NO
//INPUT D:21H  HB OF 16B NO
//INPUT D:22H  8B NO
//OUTPUT D:23H LB
//OUTPUT D:24H MB
//OUTPUT D:25H HB


17. WAP TO EVALUATE EXPRESSION ‘X2 + X + 1’ WHERE ‘X’ IS AN 8-BIT NUMBER. (VERIFIED)

ORG 00H
MOV R0,#10H
MOV R1,#20H
MOV A,@R0
MOV B,A
MUL AB
ADD A,@R0
MOV @R1,A
MOV A,B
ADDC A,#00H
MOV B,A
MOV A,@R1
ADD A,#1H
INC R0
MOV @R0,A
MOV A,B
ADDC A,#00H
INC R0
MOV @R0,A
STOP: SJMP STOP
END

INPUT:    D:10 -> 10
OUTPUT:    D:11 -> LB OF OUTPUT
        D:12 -> HB OF OUTPUT

        10^2 + 10 +1 = 111(HEX)


DIFFERENT SOLUTION ->

MOV R0,#20H   // STORE X IN 20H
MOV A,@R0
MOV B,@R0
MUL AB
ADD A,@R0
ADD A,#1
MOV 21H,A
MOV A,B
ADDC A,#00H
MOV 22H,A
HERE: SJMP HERE
END


18. WAP TO CONVERT PACKED BCD INTO UNPACKED BCD NUMBER. (TECHMAX PAGE L-1) (VERIFIED)

MOV A,#92H
MOV B,A
ANL A,#0F0H
SWAP A
MOV R1,A
MOV A,B
ANL A,#0FH
MOV R0,A
END

NO INPUT
OUTPUT : R0 REGISTER

19. WAP TO CONVERT UNPACKED BCD INTO PACKED BCD NUMBER. (TECHMAX PAGE 4-09) (VERIFIED)

MOV A,#09 H
MOV B, #02 H
RL  A
RL  A
RL  A
RL  A
ADD A,B
END

NO INPUT
OUTPUT : A REGISTER

20. WAP TO ADD TWO 4-DIGIT BCD NUMBERS. (VERIFIED)

MOV R0,#10H
MOV DPH,@R0
INC R0
MOV DPL,@R0
INC R0
MOV B,@R0
INC R0
MOV A,@R0
ADD A,DPL
DA A
MOV 16H,A
MOV A,B
ADDC A,DPH
DA A
MOV 15H,A
MOV A,#00H
ADDC A,#00H
MOV 14H,A
STOP: SJMP STOP
END

D:10 -> HB OF 1ST NUMBER
D:11 -> LB OF 1ST NUMBER
D:12 -> HB OF 2ND NUMBER
D:13 -> LB OF 2ND NUMBER
D:15 -> HB OF RESULT
D:16 -> LB OF RESULT

21. WAP TO SUBTRACT 2-DIGIT BCD NUMBERS. (VERIFIED FOR LARGER NUMBER MINUS SMALLER NUMBER)

ORG 0000H
MOV R0,#20H
MOV A,@R0
MOV R1,A  //STORING FIRST NUMBER IN REGISTER R1
INC R0
MOV A,@R0
MOV R2,A  //STORING SECOND NUMBER IN REGISTER R2
MOV A,#99H
SUBB A,R2 //9'S COMPLEMENT OF 2ND NUMBER
ADD A,R1  //ADDING FIRST NUMBER TO 9'S COMPLEMENT OF 2ND NUMBER
DA A  //INVALID TO VALID BCD
ADDC A,#00H  //CARRY IS ADDED TO THE RESULT WHEN USING 9'S COMPLEMENT
DA A  //INVALID TO VALID BCD
MOV R3,A  //STORING FINAL RESULT IN REGISTER R3
INC R0
MOV @R0,A  //STORING FINAL RESULT AT LOCATION 21H
STOP: SJMP STOP
END

INPUT : D:20H AND D:21H
OUTPUT : D:22H
10S COMP OF B IS 99-B+1
LOGIC 
A-B = A + 10SCOMP(B)
IDEAL EXAMPLE :  11-7= 04 AND 7-11 = 95

ALTERNATE SOLUTION ->

ORG 0000H
MOV R0,#21H //N2
MOV B,@R0
MOV A,#99H
SUBB A,B//10S COMPLIMENT
ADD A,#01H
MOV R1,#20H //N1
ADD A,@R1
DA A //CHECK RESULT OF N1-N2 IN A
END

INPUT : D:20H AND D:21H
OUTPUT : D:22H

22. WAP TO FIND SUM OF DATA BLOCK OF 10-BYTES. (VERIFIED)

MOV A,#00H
MOV R0,#30H
MOV R2,#00H
MOV R3,#0AH
UP: ADD A,@R0
JNC DOWN
INC R2
DOWN: INC R0
DJNZ R3,UP
MOV R1,#3AH
MOV @R1,A
INC R1
MOV A,R2
MOV @R1,A
HERE: SJMP HERE
END
    
    
INPUT: D:30H
OUTPUT: SUM: D:3AH , CARRY: D: 3BH


23. WAP TO PERFORM 8-BIT DIVISION. (TECHMAX PG 4-31) (VERIFIED)

MOV DPTR,#3000 H
MOVX A,@DPTR
MOV R0,A
INC DPTR
MOVX A,@DPTR
MOV B,A
MOV A, R0
DIV AB
MOV DPTR,#3020 H
MOVX @DPTR,A
INC DPTR
MOV A,B
MOVX @DPTR,A
END 

INPUT : X:3000H-DIVIDEND X:3001-DIVISOR
OUTPUT : X:3020-QUOTIENT X:3021-REMAINDER
EXAMPLE : 000F / 08 
          Q=01, R=07

24. WAP TO CONVERT PACKED BCD INTO ASCII CODE. (VERIFIED)

ORG 00H
MOV R0,#20H
MOV A,@R0
ANL A,#0F0H
SWAP A
ADD A,#30H
MOV R1,A
MOV A,@R0
ANL A,#0FH
ADD A,#30H
MOV R2,A
STOP: SJMP STOP
END

INPUT : D:20H
OUTPUT : D:20H
EXAMPLE : 57 --> ASCII(5)=HEX(53)=35
